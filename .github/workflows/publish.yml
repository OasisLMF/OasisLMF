# Workflow to manage the GitHub release for OasisLMF (CD)
#   Tags, builds, creates a GitHub release and uploads to pypi
#
# inputs:
#   release_tag: The SemVar release tag to publish as format - [{n}.{n}.{n}] e.g. 3.0.0,
#                where 'n' is an int.  For Pre-Releases the format is  [{n}.{n}.{n}rc{n}]
#                If the tag format is not followed the workflow fails.
#
#
#   prev_release_tag: When building the release notes and changelogs, this is the tag to start listing
#                     changes from. so if (prev_release_tag=1.26.3, release_tag=1.26.5)
#
#                     the changelogs will document all PRs between the exisiting tag '1.26.3' and the
#                     newly created tag '1.26.5'
#
#   pre_release: Either 'true', 'false', if set to true then the release is marked as a pre-release and the version
#                tag must be formatted as "{n}.{n}.{n}rc{n}"
#
#   build_osx: Either 'true', 'false', optional setting to build and upload an OSX python package (intel support only)

name: Oasislmf Release

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release tag, for release [semvar]'
        required: true

      prev_release_tag:
        description: 'The previous oasislmf release version [semvar]'
        required: true

      pre_release:
        description: 'Mark GitHub release as pre-release [true, false]'
        required: true
        default: 'false'

      build_osx:
        description: 'Build OSX package package [true, false]'
        required: false
        default: 'false'

      # TESTING ONLY
      # This is Risky and should be exposed by default --> Run ./.github/workflows/version.yml separately and wait for testing workflows to pass before publish
      #ktools_version_set:
      #  description: '(Optional) Pin a new ktools version, semvar (without the "v") For ktools release v3.0.0 input [3.0.0]'
      #  required: false
      #  default: ''


env:
  BUILD_SCRIPTS: "master"    # build scripts branch
  WORKSPACE: ${{ github.workspace }}/OasisLMF
  RELEASE_TAG: ${{ inputs.release_tag }}
  PREV_RELEASE_TAG: ${{ inputs.prev_release_tag }}
  PRE_RELEASE: ${{ inputs.pre_release }}


jobs:
  update:
    uses: ./.github/workflows/version.yml
    secrets: inherit
    with:
      oasislmf_version: ${{ inputs.release_tag }}
      ktools_version: "" # !! TESTING ONLY !!

  build:
    uses: ./.github/workflows/build.yml
    secrets: inherit
    needs: update
    with:
      ktools_branch: "" # !! TESTING ONLY !!
      build_osx: ${{ inputs.build_osx }}

  release:
    runs-on: ubuntu-latest
    needs: build
    outputs:
      heading: ${{ steps.slack_vars.outputs.heading }}
      title: ${{ steps.slack_vars.outputs.title }}
      build_branch: ${{ steps.slack_vars.outputs.branch }}
      run_url: ${{ steps.slack_vars.outputs.run_url }}
      run_id: ${{ steps.slack_vars.outputs.run_id }}
      run_status: ${{ steps.slack_vars.outputs.run_status }}
      run_date: ${{ steps.slack_vars.outputs.run_date }}

    steps:
    # --- Pre Publish checks --- #
    - name: check branchname is valid for release
      if: ${{ !startsWith(github.ref_name , 'release/') && !startsWith(github.ref_name, 'backports/') }}
      run: |
        echo "Releases must be trigged on branchs 'release/x.x.x' or 'backports/x.x.x' "
        exit 1

    - name: Check tag is valid for release
      if: env.PRE_RELEASE == 'false'
      run: |
        VALID=$(echo ${{ env.RELEASE_TAG }} | grep -oPc "^(\d+)\.(\d+)\.(\d+)$")
        if [[ ! "$VALID" == 1 ]]; then
            echo "Release Tag ${{ env.RELEASE_TAG }} is not valid"
            exit 1
        fi

    - name: Check tag is valid for pre-release
      if: env.PRE_RELEASE == 'true'
      run: |
        VALID=$(echo ${{ env.RELEASE_TAG }} | grep -oPc "^(\d+)\.(\d+)\.(\d+)rc(\d+)$")
        if [[ ! "$VALID" == 1 ]]; then
            echo "Release Tag ${{ env.RELEASE_TAG }} is not valid"
            exit 1
        fi

    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0 # fetch the whole repo for complete history
        ref: ${{ github.ref_name }}
        path: ${{ env.WORKSPACE }}

    - name: Check tag matches version set
      working-directory: ${{ env.WORKSPACE }}
      run: |
       BUILD_VER=$(grep '__version__' oasislmf/__init__.py | awk -F"'" '{print $2}')
       RELEASE_VER=${{ env.RELEASE_TAG }}
       [[ "$RELEASE_VER" = "$BUILD_VER" ]] && ERROR_CODE=0 || ERROR_CODE=1
       if [[ "$ERROR_CODE" == 1 ]]; then
           echo "PACKAGE_VER: $BUILD_VER stored in 'oasislmf/__init__.py' dosn't match RELEASE_TAG: $RELEASE_VER" && exit $ERROR_CODE
       fi

    - name: Test package names
      run: |
        ERROR_CODE=0
        SRC_VER=$(echo ${{ needs.build.outputs.src_pkg_filename }} | grep -oP "(\d+)\.(\d+)\.(\d+)rc(\d+)|(\d+)\.(\d+)\.(\d+)")
        BIN_VER=$(echo ${{ needs.build.outputs.linux_pkg_filename }} | grep -oP "(\d+)\.(\d+)\.(\d+)rc(\d+)|(\d+)\.(\d+)\.(\d+)")
        [[ "${{ env.RELEASE_TAG }}" = "$SRC_VER" ]] || ERROR_CODE=1
        [[ "${{ env.RELEASE_TAG }}" = "$BIN_VER" ]] || ERROR_CODE=1
        if [[ "$ERROR_CODE" == 1 ]]; then
            echo "Package names don't match release tag."
            echo "  RELEASE_TAG: ${{ env.RELEASE_TAG }}"
            echo "  PACKAGES: ${{ needs.build.outputs.src_pkg_filename }}, ${{ needs.build.outputs.linux_pkg_filename }}"
            exit $ERROR_CODE
        fi

    # --- Setup Changelog builder script --- #
    - name: Setup github user
      run: |
        git config --global user.email ${{ env.GIT_EMAIL }}
        git config --global user.name ${{ env.GIT_USERNAME }}
        git config --global pull.ff only
      env:
        GIT_EMAIL: ${{ secrets.BUILD_GIT_EMAIL }}
        GIT_USERNAME: ${{ secrets.BUILD_GIT_USERNAME }}

    - name: Tag Release
      working-directory: ${{ env.WORKSPACE }}
      env:
        GITHUB_TOKEN: ${{ secrets.BUILD_GIT_TOKEN }}
      run: |
        git checkout ${{ github.ref_name }}
        git tag ${{ env.RELEASE_TAG }}

    - name: Setup python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Setup Changelog builder
      working-directory: ${{ github.workspace }}
      run: |
        BASE_URL="https://raw.githubusercontent.com/OasisLMF/build/${{ env.BUILD_SCRIPTS }}/buildscript"
        pip install -r $BASE_URL/requirments_changelog.txt
        wget $BASE_URL/auto_changelog.py
        chmod +x auto_changelog.py

    - name: Setup Twine
      working-directory: ${{ github.workspace }}
      run: pip install twine

    - name: Create changelog
      working-directory: ${{ env.WORKSPACE }}
      env:
        GITHUB_TOKEN: ${{ secrets.BUILD_GIT_TOKEN }}
      run: |
        ${{ github.workspace }}/auto_changelog.py build-changelog \
          --repo OasisLMF \
          --from-tag ${{ env.PREV_RELEASE_TAG }} \
          --to-tag ${{ env.RELEASE_TAG }} \
          --github-token ${{ secrets.BUILD_GIT_TOKEN }} \
          --local-repo-path ./ \
          --output-path ./CHANGELOG.rst \
          --apply-milestone
        git add ./CHANGELOG.rst
        git commit -m 'Update changelog'

    - name: Create Release notes
      working-directory: ${{ env.WORKSPACE }}
      run: |
        ${{ github.workspace }}/auto_changelog.py build-release \
          --repo OasisLMF \
          --from-tag ${{ env.PREV_RELEASE_TAG }} \
          --to-tag ${{ env.RELEASE_TAG }} \
          --github-token ${{ secrets.BUILD_GIT_TOKEN }} \
          --local-repo-path ./ \
          --output-path ./RELEASE.md

    - name: Download Source package
      uses: actions/download-artifact@v3
      with:
        name: oasislmf-source-pkg
        path: ${{ github.workspace }}/

    - name: Download Linux package
      uses: actions/download-artifact@v3
      with:
        name: oasislmf-bin-pkg_linux
        path: ${{ github.workspace }}/

    - name: Download OSX package
      if: needs.build.outputs.osx_pkg_filename != ''
      uses: actions/download-artifact@v3
      with:
        name: oasislmf-bin-pkg_darwin
        path: ${{ github.workspace }}/


    # --- Sign packages --- #
    - name: Import GPG key
      id: import_gpg
      uses: crazy-max/ghaction-import-gpg@v5
      with:
        gpg_private_key: ${{ secrets.GPG_PYPI_SIGNING_KEY }}
        passphrase: ${{ secrets.GPG_PYPI_SIGNING_PASS }}

    - name: GPG sign Source package
      working-directory: ${{ github.workspace }}
      run: |
        gpg --batch --no-tty --passphrase-fd 0 --detach-sign -a ${{ needs.build.outputs.src_pkg_filename }}

    - name: GPG sign Linux package
      working-directory: ${{ github.workspace }}
      run: |
        gpg --batch --no-tty --passphrase-fd 0 --detach-sign -a ${{ needs.build.outputs.linux_pkg_filename }}

    - name: GPG sign OSX package
      working-directory: ${{ github.workspace }}
      if: needs.build.outputs.osx_pkg_filename != ''
      run: |
        gpg --batch --no-tty --passphrase-fd 0 --detach-sign -a ${{ needs.build.outputs.darwin_pkg_filename }}


    # --- Create Release --- #
    - name: Push changes
      working-directory: ${{ env.WORKSPACE }}
      run: |
        git push origin ${{ env.RELEASE_TAG  }}
        git push

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.BUILD_GIT_TOKEN }}
      with:
        tag_name: ${{ env.RELEASE_TAG }}
        release_name: Release ${{ env.RELEASE_TAG }}
        body_path: ${{ env.WORKSPACE }}/RELEASE.md
        draft: false
        prerelease: ${{ env.PRE_RELEASE }}

    # --- Attach build assest --- #
    - name: Upload Source package
      id: upload-source-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.BUILD_GIT_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ github.workspace }}/${{ needs.build.outputs.src_pkg_filename }}
        asset_name: ${{ needs.build.outputs.src_pkg_filename }}
        asset_content_type: application/octet-stream

    - name: Upload Linux package
      id: upload-linux-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.BUILD_GIT_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ github.workspace }}/${{ needs.build.outputs.linux_pkg_filename }}
        asset_name: ${{ needs.build.outputs.linux_pkg_filename }}
        asset_content_type: application/octet-stream

    - name: Upload OSX package
      if: needs.build.outputs.osx_pkg_filename != ''
      id: upload-osx-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.BUILD_GIT_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ github.workspace }}/${{ needs.build.outputs.osx_pkg_filename }}
        asset_name: ${{ needs.build.outputs.osx_pkg_filename }}
        asset_content_type: application/octet-stream

    # --- Publish to Pypi --- #
    - name: PYPI - Source package
      run: |
        twine upload \
        ${{ needs.build.outputs.src_pkg_filename }} \
        ${{ needs.build.outputs.src_pkg_filename }}.asc
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}

    - name: PYPI - Linux package
      run: |
        twine upload \
        ${{ needs.build.outputs.linux_pkg_filename }} \
        ${{ needs.build.outputs.linux_pkg_filename }}.asc
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}

    - name: PYPI - OSX package
      if: needs.build.outputs.osx_pkg_filename != ''
      run: |
        twine upload \
        ${{ needs.build.outputs.osx_pkg_filename }}
        ${{ needs.build.outputs.osx_pkg_filename }}.asc
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}

    # --- Slack notify --- #
    - name: slack message vars
      id: slack_vars
      run: |
        HEAD=$(echo "*${{ github.event.repository.name}} Release* (${{ env.RELEASE_TAG }})")
        DATE=$(date)
        TITLE=$(echo "• <https://github.com/${{ github.repository }}/releases/tag/${{ env.RELEASE_TAG }}|${{ github.event.repository.name }} ${{ env.RELEASE_TAG }} - Release Notes>")
        JOB_URL=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        echo "heading=$HEAD" >> $GITHUB_OUTPUT
        echo "run_date=$DATE" >> $GITHUB_OUTPUT
        echo "title=$TITLE" >> $GITHUB_OUTPUT
        echo "run_url=$JOB_URL" >> $GITHUB_OUTPUT
        echo "run_id=${{ github.run_id }}"  >> $GITHUB_OUTPUT
        echo "branch=${{ github.ref_name }}" >> $GITHUB_OUTPUT
        echo "run_status=${{ job.status }}" >> $GITHUB_OUTPUT

  # --- Notify Slack --- #
  slack:
    uses: ./.github/workflows/notify.yml
    secrets: inherit
    needs: release
    with:
      heading: ${{ needs.release.outputs.heading }}
      title: ${{ needs.release.outputs.title }}
      build_branch: ${{ needs.release.outputs.build_branch }}
      run_url: ${{ needs.release.outputs.run_url }}
      run_id: ${{ needs.release.outputs.run_id }}
      run_status: ${{ needs.release.outputs.run_status }}
      run_date: ${{ needs.release.outputs.run_date }}
